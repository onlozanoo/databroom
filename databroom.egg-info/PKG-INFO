Metadata-Version: 2.4
Name: databroom
Version: 0.3.0
Summary: A cross-language DataFrame cleaning assistant with interactive GUI and one-click code export
Author-email: Oliver Lozano <onlozanoo@gmail.com>
Maintainer-email: Oliver Lozano <onlozanoo@gmail.com>
License: MIT
Project-URL: Homepage, https://github.com/onlozanoo/databroom
Project-URL: Documentation, https://github.com/onlozanoo/databroom/blob/main/README.md
Project-URL: Repository, https://github.com/onlozanoo/databroom
Project-URL: Issues, https://github.com/onlozanoo/databroom/issues
Project-URL: Changelog, https://github.com/onlozanoo/databroom/releases
Keywords: data-cleaning,pandas,streamlit,data-preprocessing,code-generation,gui,dataframe
Classifier: Development Status :: 4 - Beta
Classifier: Intended Audience :: Developers
Classifier: Intended Audience :: Science/Research
Classifier: License :: OSI Approved :: MIT License
Classifier: Programming Language :: Python :: 3
Classifier: Programming Language :: Python :: 3.8
Classifier: Programming Language :: Python :: 3.9
Classifier: Programming Language :: Python :: 3.10
Classifier: Programming Language :: Python :: 3.11
Classifier: Programming Language :: Python :: 3.12
Classifier: Topic :: Scientific/Engineering :: Information Analysis
Classifier: Topic :: Software Development :: Code Generators
Classifier: Topic :: Software Development :: Libraries :: Python Modules
Requires-Python: >=3.8
Description-Content-Type: text/markdown
License-File: LICENSE
Requires-Dist: pandas>=1.3.0
Requires-Dist: numpy>=1.20.0
Requires-Dist: streamlit>=1.28.0
Requires-Dist: unidecode>=1.3.0
Requires-Dist: jinja2>=3.0.0
Requires-Dist: pathlib2>=2.3.0
Provides-Extra: dev
Requires-Dist: pytest>=7.0.0; extra == "dev"
Requires-Dist: pytest-cov>=4.0.0; extra == "dev"
Requires-Dist: black>=22.0.0; extra == "dev"
Requires-Dist: isort>=5.10.0; extra == "dev"
Requires-Dist: flake8>=5.0.0; extra == "dev"
Requires-Dist: mypy>=0.991; extra == "dev"
Requires-Dist: pre-commit>=2.20.0; extra == "dev"
Provides-Extra: cli
Requires-Dist: typer>=0.7.0; extra == "cli"
Requires-Dist: rich>=12.0.0; extra == "cli"
Provides-Extra: reports
Requires-Dist: jinja2>=3.0.0; extra == "reports"
Requires-Dist: plotly>=5.0.0; extra == "reports"
Requires-Dist: kaleido>=0.2.1; extra == "reports"
Provides-Extra: all
Requires-Dist: databroom[cli,dev,reports]; extra == "all"
Dynamic: license-file

# 🧹 Databroom

*A powerful DataFrame cleaning tool with **Command Line Interface**, **Interactive GUI**, and **Programmatic API** - automatically generates reproducible **Python/pandas** and **R/tidyverse** code.*

[![PyPI version](https://badge.fury.io/py/janitor-bot.svg)](https://pypi.org/project/janitor-bot/)
[![Python 3.8+](https://img.shields.io/badge/python-3.8+-blue.svg)](https://www.python.org/downloads/)
[![MIT License](https://img.shields.io/badge/license-MIT-green.svg)](LICENSE)

---

## 🚀 Quick Start

### Installation

```bash
# Install from PyPI (recommended)
pip install databroom
```

### Command Line Interface (Primary Interface)

Clean your data files instantly with powerful CLI commands:

```bash
# Basic column standardization
databroom clean data.csv --standardize-column-names --output-file clean.csv

# Remove empty data with custom threshold
databroom clean messy.xlsx --remove-empty-cols --remove-empty-cols-threshold 0.8 --output-file cleaned.xlsx

# Complete cleaning pipeline with code generation
databroom clean survey.csv --remove-empty-cols --standardize-column-names --normalize-values --output-code cleaning_script.py --lang python

# Generate R/tidyverse code
databroom clean data.csv --remove-empty-rows --normalize-column-names --output-code analysis.R --lang r

# Multiple operations with verbose output
databroom clean dataset.json --remove-empty-cols --standardize-column-names --normalize-values --verbose --info

# Launch interactive GUI
databroom gui

# List all available operations
databroom list
```

### Interactive GUI

Launch the web-based interface for visual data cleaning:

```bash
databroom gui
# Opens http://localhost:8501 in your browser
```

<!-- GUI SCREENSHOTS SECTION - PLACEHOLDER -->
### GUI Screenshots

*[GUI screenshots will be added here to showcase the interactive interface, file upload, operation panels, live preview, and code generation features]*

<!-- END GUI SCREENSHOTS SECTION -->

### Programmatic API

Use Databroom directly in your Python scripts:

```python
from databroom.core.janitor import Broom

# Load and clean data with method chaining
broom = Broom.from_csv('data.csv')
result = (broom
    .remove_empty_cols(threshold=0.9)
    .standardize_column_names()
    .normalize_values())

# Get cleaned DataFrame
cleaned_df = result.get_df()
print(f"Cleaned {cleaned_df.shape[0]} rows × {cleaned_df.shape[1]} columns")

# Generate reproducible code
from databroom.generators.base import CodeGenerator
generator = CodeGenerator('python')
generator.load_history(result.get_history())
generator.export_code('my_cleaning_pipeline.py')
```

---

## ✨ Features

### **🖥️ Command Line Interface**
- **Instant cleaning** with intuitive flags and parameters
- **Batch processing** capabilities for multiple files
- **Code generation** in Python/pandas and R/tidyverse
- **Flexible output** formats (CSV, Excel, JSON)
- **Rich help** system with examples and colored output
- **Verbose mode** for detailed operation feedback

### **🎨 Interactive GUI**
- **Drag & drop** file upload (CSV, Excel, JSON)
- **Live preview** of cleaning operations
- **Interactive parameter tuning** with sliders and inputs
- **Real-time code generation** with syntax highlighting
- **One-click download** of cleaned data and generated scripts
- **Operation history** with undo functionality

### **⚙️ Programmatic API**
- **Chainable methods** for fluent data cleaning workflows
- **Factory methods** for easy file loading (`from_csv()`, `from_excel()`, etc.)
- **History tracking** for reproducible operations
- **Template-based code generation** with Jinja2

### **🔄 Code Generation**
- **Complete scripts** with imports, file loading, and execution
- **Cross-language support** (Python/pandas ↔ R/tidyverse)
- **Template system** for customizable output formats
- **Reproducible workflows** that can be shared and version controlled

---

## 🧰 Available Cleaning Operations

| Operation | CLI Flag | Purpose |
|-----------|----------|---------|
| **Remove Empty Columns** | `--remove-empty-cols` | Remove columns above missing value threshold |
| **Remove Empty Rows** | `--remove-empty-rows` | Remove completely empty rows |
| **Standardize Column Names** | `--standardize-column-names` | Convert to snake_case, remove special chars |
| **Normalize Column Names** | `--normalize-column-names` | Remove accents and unicode characters |
| **Normalize Values** | `--normalize-values` | Remove accents from text values |
| **Standardize Values** | `--standardize-values` | Convert text to lowercase + underscores |

### CLI Parameters

```bash
# Threshold parameters
--remove-empty-cols-threshold 0.8    # Custom missing value threshold (default: 0.9)

# Output options
--output-file cleaned.csv             # Save cleaned data
--output-code script.py               # Generate code file
--lang python                         # Code language (python/r)

# Behavior options
--verbose                             # Detailed output
--quiet                               # Minimal output  
--info                                # Show DataFrame info
```

---

## 📊 Example Workflows

### **Data Science Pipeline**
```bash
# Clean survey data and generate analysis script
databroom clean survey_data.xlsx \
  --remove-empty-cols --remove-empty-cols-threshold 0.7 \
  --standardize-column-names \
  --normalize-values \
  --output-file clean_survey.csv \
  --output-code survey_analysis.py \
  --verbose
```

### **R/Tidyverse Workflow**
```bash
# Generate R script for tidyverse users
databroom clean research_data.csv \
  --remove-empty-rows \
  --standardize-column-names \
  --normalize-column-names \
  --output-code tidyverse_pipeline.R \
  --lang r
```

### **Batch Processing Setup**
```bash
# Process multiple files with consistent operations
for file in data/*.csv; do
  databroom clean "$file" \
    --remove-empty-cols \
    --standardize-column-names \
    --output-file "clean_$(basename "$file")" \
    --quiet
done
```

---

## 🏗️ Architecture

Databroom follows a modular architecture designed for extensibility and maintainability:

```
databroom/
├── cli/                 # Command line interface (Typer + Rich)
│   ├── main.py          # Entry point and app configuration
│   ├── commands.py      # CLI commands (clean, gui, list)
│   ├── operations.py    # Operation parsing and execution
│   └── utils.py         # File handling and code generation
├── core/                # Core cleaning engine
│   ├── janitor.py       # Main API with method chaining
│   ├── pipeline.py      # Operation coordination and state management  
│   ├── cleaning_ops.py  # Individual cleaning operations
│   └── history_tracker.py # Automatic operation tracking
├── generators/          # Code generation system
│   ├── base.py          # Template-based code generator
│   └── templates/       # Jinja2 templates for Python/R
├── gui/                 # Streamlit web interface
│   └── app.py           # Interactive GUI application
└── tests/               # Comprehensive test suite
```

---

## 🛠️ Development

### Local Development

```bash
# Clone repository
git clone https://github.com/onlozanoo/databroom.git
cd databroom

# Create virtual environment
python -m venv venv
source venv/bin/activate  # On Windows: venv\Scripts\activate

# Install in development mode
pip install -e ".[dev,cli,all]"

# Run tests
pytest

# Run CLI locally
python -m databroom.cli.main --help
```

### Testing

```bash
# Run full test suite
pytest

# Run with coverage
pytest --cov=databroom

# Run specific test categories
pytest -m "not slow"           # Skip slow tests
pytest tests/cli/              # Test CLI only
pytest tests/core/             # Test core functionality
```

### Code Quality

```bash
# Format code
black databroom/
isort databroom/

# Lint
flake8 databroom/

# Type check
mypy databroom/
```

---

## 📈 Project Status

**Current Version**: v0.3.0 - **Production Ready**

✅ **Fully Implemented**
- Complete CLI with all cleaning operations
- Interactive Streamlit GUI with live preview
- Programmatic API with method chaining
- Python and R code generation
- Comprehensive test suite (83 tests, 69 passing)
- PyPI package distribution ready
- - Dinamic new operations load

🚧 **In Active Development**  
- Extended cleaning operations library
- Advanced parameter validation
- Performance optimizations
- Enhanced error handling

📋 **Planned Features**
- Preview in CLI
- Presets
- Batch transform
- Save/load cleaning pipelines
- Custom cleaning operation plugins  
- Integration with popular data tools
- Advanced reporting capabilities

---

## 🤝 Contributing

I welcome contributions! Here's how you can help:

### **Ways to Contribute**
- 🐛 **Bug Reports**: Submit issues with detailed reproduction steps
- 💡 **Feature Requests**: Propose new cleaning operations or CLI features
- 📝 **Documentation**: Improve examples, tutorials, or API docs
- 🧪 **Testing**: Add test cases or improve test coverage
- 💻 **Code**: Implement new features or fix existing issues

---

## 📄 License

This project is licensed under the MIT License - see the [LICENSE](LICENSE) file for details.

*Built with ❤️ for the data science community*
